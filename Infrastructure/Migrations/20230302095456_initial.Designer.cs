// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230302095456_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ClosureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FinalClosureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AcademicYear");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClosureDate = new DateTime(2022, 10, 29, 17, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2023, 4, 30, 17, 0, 0, 0, DateTimeKind.Utc),
                            FinalClosureDate = new DateTime(2023, 3, 29, 17, 0, 0, 0, DateTimeKind.Utc),
                            Name = "2022 - 2023",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClosureDate = new DateTime(2023, 11, 29, 17, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2023, 5, 31, 17, 0, 0, 0, DateTimeKind.Utc),
                            FinalClosureDate = new DateTime(2024, 4, 24, 17, 0, 0, 0, DateTimeKind.Utc),
                            Name = "2023 - 2024",
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("Domain.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Category 1",
                            TenantId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Category 2",
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedByNavigationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdeaId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByNavigationId");

                    b.HasIndex("IdeaId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("QaCoordinatorId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QaCoordinatorId")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Computing",
                            QaCoordinatorId = 3,
                            TenantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Business",
                            QaCoordinatorId = 4,
                            TenantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Design",
                            QaCoordinatorId = 5,
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("Domain.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Domain.IdeaAttachment", b =>
                {
                    b.Property<int>("IdeaId")
                        .HasColumnType("integer");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.HasKey("IdeaId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.ToTable("IdeaAttachments");
                });

            modelBuilder.Entity("Domain.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdeaId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2c5e90e5-840b-4d8e-82f3-af920d355574",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d50326ef-7c0e-411b-9199-ce501e8f9e49",
                            Name = "University QA Manager",
                            NormalizedName = "UNIVERSITY QA MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "7f82a5fb-f609-447c-84d6-9da419882e9e",
                            Name = "Department QA Coordinator",
                            NormalizedName = "DEPARTMENT QA COORDINATOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "d2f4a5d7-79bf-40fd-8f5f-779130384847",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Domain.RoleUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Domain.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Greenwich Danang"
                        });
                });

            modelBuilder.Entity("Domain.TenantUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TenantId = 1
                        },
                        new
                        {
                            UserId = 2,
                            TenantId = 1
                        },
                        new
                        {
                            UserId = 3,
                            TenantId = 1
                        },
                        new
                        {
                            UserId = 4,
                            TenantId = 1
                        },
                        new
                        {
                            UserId = 5,
                            TenantId = 1
                        },
                        new
                        {
                            UserId = 6,
                            TenantId = 1
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dceaab9-3ba0-4be9-90a4-7e7f22cb4edf",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVWlpvqM99HoYGGdwEriM6BVuuapFOGKXU9Gl1mZkNR+HIpfOC5r1AY0YNJCdoyUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de0f9209-226a-436d-8c95-d670dec60ee4",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbd6028e-046b-4098-8efa-95026f749d19",
                            Email = "qamanager@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "QAMANAGER@GMAIL.COM",
                            NormalizedUserName = "QAMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/wgU1kipmn3qlg3RcXvH4t/98M+Uld/v68J/u+GRc2qm9XiBVdNQm1IfHTzcVBng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbfff31a-4577-4def-b465-f57f88477378",
                            TwoFactorEnabled = false,
                            UserName = "qamanager@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbca6d44-d7c9-4f73-9ab1-dbe5d0ef09ca",
                            Email = "computingdepartmentqa@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMPUTINGDEPARTMENTQA@GMAIL.COM",
                            NormalizedUserName = "COMPUTINGDEPARTMENTQA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPHBv6XCCLQ2w9ZESaArYwDEZv6vBGSEQISMjHX/QQKNtqyWM7/uSRwQvFVRY/ga/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11b454bf-a871-46f7-9da0-f698a9dbb860",
                            TwoFactorEnabled = false,
                            UserName = "computingdepartmentqa@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd4ac22d-e4d0-4b84-a1d2-c68b8dcd771b",
                            Email = "businessDepartmentQA@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSDEPARTMENTQA@GMAIL.COM",
                            NormalizedUserName = "BUSINESSDEPARTMENTQA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECpgnOKh/qAsrloIcgMVo+U/HxOAr8oP3UfIbtQ4ixmVVY0T2JV0efe07Nq23rbt3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7eb13eb8-e5bd-4dbf-ad5c-a773793ebe0f",
                            TwoFactorEnabled = false,
                            UserName = "businessDepartmentQA@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c73096c7-03cc-4694-8e3d-4ac880d11ecf",
                            Email = "designDepartmentQA@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "DESIGNDEPARTMENTQA@GMAIL.COM",
                            NormalizedUserName = "DESIGNDEPARTMENTQA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKHotjJpMfBlcgKYgbJ+qDvg3dwxEVsRhjBx/ZbCmULhM9mU70K5/hEBglBCFyFnmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50746056-4468-4b6b-af04-c82a5188ab02",
                            TwoFactorEnabled = false,
                            UserName = "designDepartmentQA@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aefa3f62-4350-4b72-a835-484ebcf7cec3",
                            Email = "staff@gmail.com",
                            EmailConfirmed = false,
                            Gender = (byte)1,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECx9m+2K6wAlV1kKGPqrmoHG8PosACx/yAqqna7ozuPGr7585zTcfMUgxflA1XyXmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8011f7d-995d-44e6-921c-d2687cc9d23a",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.UserDepartment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            DepartmentId = 1
                        },
                        new
                        {
                            UserId = 4,
                            DepartmentId = 2
                        },
                        new
                        {
                            UserId = 5,
                            DepartmentId = 3
                        },
                        new
                        {
                            UserId = 6,
                            DepartmentId = 1
                        },
                        new
                        {
                            UserId = 1,
                            DepartmentId = 1
                        },
                        new
                        {
                            UserId = 1,
                            DepartmentId = 2
                        },
                        new
                        {
                            UserId = 1,
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.User", "CreatedByNavigation")
                        .WithMany()
                        .HasForeignKey("CreatedByNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Idea", "Idea")
                        .WithMany("Comments")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Domain.Department", b =>
                {
                    b.HasOne("Domain.User", "QaCoordinator")
                        .WithOne()
                        .HasForeignKey("Domain.Department", "QaCoordinatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("QaCoordinator");
                });

            modelBuilder.Entity("Domain.Idea", b =>
                {
                    b.HasOne("Domain.AcademicYear", "AcademicYear")
                        .WithMany("Ideas")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Ideas")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "CreatedByNavigation")
                        .WithMany("Ideas")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Domain.Department", "Department")
                        .WithMany("Ideas")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.IdeaAttachment", b =>
                {
                    b.HasOne("Domain.Attachment", "Attachment")
                        .WithMany("IdeaAttachments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Idea", "Idea")
                        .WithMany("IdeaAttachments")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Domain.Reaction", b =>
                {
                    b.HasOne("Domain.Idea", "Idea")
                        .WithMany("Reactions")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.RoleUser", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TenantUser", b =>
                {
                    b.HasOne("Domain.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.UserDepartment", b =>
                {
                    b.HasOne("Domain.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AcademicYear", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("Domain.Attachment", b =>
                {
                    b.Navigation("IdeaAttachments");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("Domain.Department", b =>
                {
                    b.Navigation("Ideas");

                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("Domain.Idea", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IdeaAttachments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("Domain.Tenant", b =>
                {
                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Ideas");

                    b.Navigation("Reactions");

                    b.Navigation("RoleUsers");

                    b.Navigation("TenantUsers");

                    b.Navigation("UserDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
